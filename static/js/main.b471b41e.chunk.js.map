{"version":3,"sources":["Cell.js","Board.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","_this$props","ncols","nrows","winnable","forEach","row","filter","e","length","col","numTrue","num","_this$props2","chanceLightStartsOn","i","j","Math","random","checkIfBoardIsWinnable","_this$props3","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","flat","includes","setState","_this2","tableRows","key","val","concat","src_Cell_0","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b471b41e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport { randomTrueOrFalse } from \"./helpers\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board (default: 5)\n * - ncols: number of cols of board (default: 5)\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.5,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** ensure that every came is winnable by ensuring each row and col has an\n   * even number of lit cells\n   * */\n\n  checkIfBoardIsWinnable(board) {\n    const { ncols, nrows } = this.props;\n    let winnable = true;\n\n    // make sure an even number of cells are lit each row\n    board.forEach((row) => {\n      const numTrue = row.filter((e) => e === true).length;\n      if (numTrue % 2 !== 0) winnable = false;\n    });\n\n    // make sure an even number of cells are lit each column\n    for (let col = 0; col < ncols; col++) {\n      let numTrue = 0;\n      for (let row = 0; row < nrows; row++) {\n        if (board[row][col] === true) numTrue++;\n      }\n      if (numTrue % 2 !== 0) winnable = false;\n    }\n\n    return winnable;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    const { ncols, nrows, chanceLightStartsOn } = this.props;\n    let board = [];\n    // creates an array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      board[i] = [];\n      for (let j = 0; j < ncols; j++) {\n        board[i][j] = randomTrueOrFalse(chanceLightStartsOn);\n      }\n    }\n\n    if (!this.checkIfBoardIsWinnable(board)) {\n      board = this.createBoard();\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let hasWon = this.state.hasWon;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n\n    // win when every cell is turned off\n    if (!board.flat().includes(true)) {\n      hasWon = true;\n    }\n\n    this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    const tableRows = this.state.board.map((e, row) => (\n      <tr key={row}>\n        {e.map((val, col) => {\n          const key = `${row}-${col}`;\n\n          return (\n            <Cell\n              isLit={val}\n              key={key}\n              coord={key}\n              flipCellsAroundMe={this.flipCellsAround}\n            />\n          );\n        })}\n      </tr>\n    ));\n\n    return (\n      <div className=\"Board\">\n        {this.state.hasWon ? (\n          <p className=\"Board-win-msg\">You win!</p>\n        ) : (\n          <table>\n            <tbody>{tableRows}</tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","function randomTrueOrFalse(num) {\n  const randomNum = Math.random();\n  if (randomNum < num) return false;\n  return true;\n}\n\nexport { randomTrueOrFalse };\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-tile\">Lights Out</h1>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}